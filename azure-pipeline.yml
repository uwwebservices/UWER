variables:
  serviceName: 'eventregistration-eval'
  tagName: 'develop'

pool:
  name: ECS Build Agents

steps:
  # Change the service name and tag name when running on master
  - script: "echo '##vso[task.setvariable variable=serviceName]eventregistration-prod'"
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'), ne(variables['Build.Reason'], 'PullRequest'))
  - script: "echo '##vso[task.setvariable variable=tagName]prod'"
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'), ne(variables['Build.Reason'], 'PullRequest'))

  # Download common build scripts
  - task: DownloadBuildArtifacts@0
    displayName: 'Download common build scripts'
    inputs:
      buildType: 'specific'
      project: 'WS'
      pipeline: 'uwwebservices.buildscripts'
      buildVersionToDownload: 'LatestFromBranch'
      branchName: 'refs/heads/master'
      downloadType: 'specific'
      itemPattern: '**'
      downloadPath: '$(System.DefaultWorkingDirectory)/temp'

  # Download sp-key file from secure files
  - task: DownloadSecureFile@1
    displayName: 'Download sp-key file'
    inputs:
      secureFile: 'sp-key.pem'

    # Copy files from source folder to target folder using match patterns (The match patterns will only match file paths, not folder paths)
  - task: CopyFiles@2
    displayName: 'Copy sp-key file to UWER project directory'
    inputs:
      overWrite: true
      sourceFolder: '$(Agent.TempDirectory)'
      contents: 'sp-key.pem'
      targetFolder: '$(Build.SourcesDirectory)'

  # Remove dangling docker images
  - task: CmdLine@2
    displayName: 'Remove dangling docker images'
    inputs:
      script: 'docker image prune -f'

  # Build the docker image
  - task: Docker@0
    displayName: 'Build docker image'
    inputs:
      containerregistrytype: 'Container Registry'
      imageName: 'eventregistrationimage'
      qualifyImageName: false
      includeLatestTag: true

  # Push the new docker image up to AWS
  - task: ECRPushImage@1
    condition: |
      and(
          or(eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'master')), 
          ne(variables['Build.Reason'], 'PullRequest')
      )
    displayName: 'Push docker image to AWS Container Registry'
    inputs:
      awsCredentials: 'AWS OTIK2'
      regionName: 'us-east-1'
      sourceImageName: 'eventregistrationimage'
      repositoryName: eventregistration
      pushTag: $(tagName)

  # Poke the instance so it'll grab the newly uploaded image
  - task: AWSCLI@1
    condition: |
      and(
          or(eq(variables['Build.SourceBranchName'], 'develop'), eq(variables['Build.SourceBranchName'], 'master')), 
          ne(variables['Build.Reason'], 'PullRequest')
      )
    displayName: 'Force a new deployment for the new docker image'
    inputs:
      awsCredentials: 'AWS OTIK2'
      regionName: 'us-east-1'
      awsCommand: ecs
      awsSubCommand: 'update-service'
      awsArguments: '--cluster ews-cluster --service $(serviceName) --force-new-deployment'
      failOnStandardError: true
